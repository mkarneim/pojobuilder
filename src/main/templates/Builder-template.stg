delimiters "<", ">"

builderClass(model) ::= <<
<if(model.type.package)>package <model.type.package>;
<endif>

<model.importTypes:importStatement()>
/**
 * The {@link <model.type.simpleName>} is a Builder for {@link <model.productType.simpleName>} objects.
 *
 * \<p\>
 *     This class has been generated.
 *     Please DO NOT MODIFIY this file
 *     since it will be overwritten 
 *     by the PojoBuilder generator.
 * \</p\>
 */
@Generated("PojoBuilder")
public <if(model.abstractClass)>abstract <endif>class <model.type.genericTypeSimpleNameWithBounds> <if(!model.superType.object)>extends <model.superType.genericTypeSimpleName> <endif>implements Cloneable {
	protected <model.selfType.genericTypeSimpleName> self;
	<model.properties:propertyVar()>
	
	/**
	 * Creates a new {@link <model.type.simpleName>}.
	 */
	public <model.type.simpleName>() {
		self = (<model.selfType.genericTypeSimpleName>)this;
	}
	
	<model.properties:propertyWith()>
	
	/**
	 * Returns a clone of this builder.
	 * @return the clone
	 */
	@Override	
	public Object clone() {
		try {
			<model.selfType.genericTypeSimpleName> result = (<model.selfType.genericTypeSimpleName>)super.clone();
			result.self = result;
			return result;
		} catch (CloneNotSupportedException e) {
			throw new InternalError(e.getMessage());
		}        
	}
    
	/**
	 * Returns a clone of this builder.
	 * @return the clone
	 */
	<if(model.type.generic)>@SuppressWarnings("unchecked")<endif>
	public <model.selfType.genericTypeSimpleName> but() {
		return (<model.selfType.genericTypeSimpleName>)clone();
	}
	
	/**
	 * Creates a new {@link <model.productType.simpleName>} based on this builder's settings.
	 * @return the created <model.productType.simpleName>
	 */
	public <model.productType.genericTypeSimpleName> build() {
		<model:productContructorCall()>
		<model.propertiesForSetters:propertySetterCall()>
		<model.propertiesForAssignment:propertyAssignment()>
		return result;
	}
	
	<if(model.implementingCopyMethod)>
	/**
 	* Copies properties from <i>original</i> into the builder
 	* @param original the object to be copied
 	* @return this builder
 	*/
	public <model.selfType.genericTypeSimpleName> copy(<model.productType.genericTypeSimpleName> original) {
		<model.properties:copyProperty()>
		return this;
	}
	<endif>
}
>>


importStatement(importName) ::= <<
import <importName>;

>>

propertyVar(property) ::= <<

protected <property.type.genericTypeSimpleName> value$<property.fieldname>; <if(property.constructorParameter)>// mandatory constructor parameter<endif>
protected boolean isSet$<property.fieldname> = false; 


>>

propertyWith(property) ::= <<
/**
 * Sets the default value for the {@link <model.productType.simpleName>#<property.name>} property.
 * @param value the default value
 * @return this builder
 */
public <model.selfType.genericTypeSimpleName> with<property.nameUC>( <property.type.genericTypeSimpleName> value) {
	this.value$<property.fieldname> = value;
	this.isSet$<property.fieldname> = true;
	return self;
}

>>

propertySetterCall(property) ::= <<
if ( this.isSet$<property.fieldname>) {    
	result.<property.setter>( this.value$<property.fieldname>);		
}

>>

propertyAssignment(property) ::= <<
if ( this.isSet$<property.fieldname>) { 
	result.<property.name> = this.value$<property.fieldname>;	
}

>>

productContructorCall(model) ::= <<
<if(model.usingFactory)>
<model.productType.genericTypeSimpleName> result = <model.factory.ownerType.simpleName>.<model.factory.methodName>( <model.propertiesForConstructor:constructorArgument(); separator=",">);
<else>
<model.productType.genericTypeSimpleName> result = new <model.productType.genericTypeSimpleName>( <model.propertiesForConstructor:constructorArgument(); separator=",">);
<endif>
>>

constructorArgument(property) ::= <<this.value$<property.fieldname> >>

copyProperty(property) ::= <<this.with<property.nameUC>(original.<property.getter>());

>>