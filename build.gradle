/**
 * To create the Eclipse project and classpath files:
 *   ./gradlew cleanEclipse eclipse
 *
 * To build the PojoBuilder:
 *   ./gradlew build
 *
 * To publish a new release of PojoBuilder to Sonatype OSS Maven Repo:
 *   ./gradlew clean publish
 *
 * To publish a new release of PojoBuilder to the local maven repo:
 *   ./gradlew clean publishToMavenLocal
 */

buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
  dependencies {
    // (No plugins for jmh or coveralls)
  }
}

if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
  println 'OSS repository hosting username or password not set'
  ext.ossrhUsername = ''
  ext.ossrhPassword = ''
}

group = 'net.karneim'
version = '4.3.1-SNAPSHOT'

ext {
  isReleaseVersion = !version.endsWith('SNAPSHOT')
  buildDate = new Date().format("yyyy-MM-dd HH:mm:ss")
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

java {
  java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation 'com.squareup:javawriter:2.5.0'
  testImplementation 'com.google.guava:guava:15.0'
  testImplementation 'junit:junit:4.11'
  testImplementation 'org.assertj:assertj-core:1.6.1'
}

jacocoTestReport {
  reports {
    xml.required.set(true)
    html.required.set(true)
  }
}

eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = false
  }
}

sourceSets {
  test {
    java {
      srcDir 'src/testdata/java'
      srcDir 'src/test/java'
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

task annotationsJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('annotations')
  from sourceSets.main.output.classesDirs
  includeEmptyDirs = false
  include '**/GeneratePojoBuilder.class'
  include '**/FactoryProperties.class'
  include '**/Visibility.class'
  include '**/GwtIncompatible.class'
  from sourceSets.main.output.resourcesDir
}

tasks.withType(Jar) {
  into('META-INF') {
    from 'COPYING'
  }
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Created-Date': buildDate
    )
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar
      artifact javadocJar
      artifact annotationsJar

      pom {
        name.set('PojoBuilder')
        description.set('The PojoBuilder Generator is a Java 6 compliant annotation processor that generates a fluent builder class for POJOs (Plain Old Java Object)')
        url.set('http://github.com/mkarneim/pojobuilder')
        packaging = 'jar'

        scm {
          url.set('git@github.com:mkarneim/pojobuilder.git')
          connection.set('scm:git:git@github.com:mkarneim/pojobuilder.git')
          developerConnection.set('scm:git:git@github.com:mkarneim/pojobuilder.git')
          tag.set('HEAD')
        }
        licenses {
          license {
            name.set('PUBLIC DOMAIN')
            url.set('http://github.com/mkarneim/pojobuilder/blob/master/COPYING')
            distribution.set('repo')
            comments.set('Do-whatever-you-want license')
          }
        }
        developers {
          developer {
            id.set('mkarneim')
            name.set('Michael Karneim')
            timezone.set('GMT+1')
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = "sonatype"
      url = isReleaseVersion
            ? uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            : uri("https://oss.sonatype.org/content/repositories/snapshots/")
      credentials {
        username = project.ossrhUsername
        password = project.ossrhPassword
      }
    }
  }
}

def hasSigningKeys =
  project.hasProperty('signing.secretKeyRingFile') &&
  project.hasProperty('signing.keyId') &&
  project.hasProperty('signing.password')

tasks.withType(Sign) {
  onlyIf { isReleaseVersion && hasSigningKeys }
}

signing {
  sign publishing.publications.mavenJava
}
